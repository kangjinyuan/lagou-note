一.函数式编程范式

1.为什么要学习函数式编程

1）函数式编程是随着React的流行受到越来越多的关注
2）Vue 3也开始拥抱函数式编程
3）函数式编程可以抛弃this
4）打包过程中可以更好的利用 tree shaking过滤无用代码
5）方便测试，方便并行处理
6）有很多库可以帮助我们进行函数式编程：lodash,underscore,ramda

2.函数式编程概念

函数式编程（Functional Programming = FP)，FP是编程范式之一，我们常听到的编程范式还有面向过程编程，面向对象编程

面向对象和函数式编程区别

1）面向对象编程的思维方式：把现实世界的事物抽象成程序世界中的类和对象，通过封装，继承和多态来演示事物和事件的联系
2）函数式编程的思维方式：把现实世界的事物和事物之间的联系抽象到程序世界（对运算过程进行抽象）

概念

1）程序的本质：根据输入通过某种运算获取相应的输出，程序开发过程中会涉及到很多有输入和输出的函数
2）x->f(联系，映射)->y,y=f(x)
3）函数式编程中的函数指的不是程序中的函数，而是数学中的函数即映射关系，例如：y=sin(x)，x和y的关系
4）相同的输入始终要得到相同的输出（纯函数）
5）函数式编程用来描述数据（函数）之间的映射

3.函数是一等公民

MDN First-class Function

1）函数可以存储在变量中
2）函数可以作为参数
3）函数可以作为返回值

4.高阶函数

Higher-order-function

1）可以把函数作为参数传递给另一个函数
2）可以把函数作为另一个函数的返回结果

优点

1）可以使函数变得很灵活
2）抽象可以帮我们屏蔽细节，只需要关注与我们的目标
3）高阶函数是用来抽象通用的问题

常用的高阶函数

forEach
map
filter
every
some
find/findIndex
reduce
sort

5.闭包

1）函数和其他周围的状态（词法环境）的引用捆绑在一起形成闭包
2）可以在另一个作用域中调用另一个函数内部函数并访问到该函数的作用域成员

本质：函数在执行的时候会放到一个执行栈上当函数执行完毕之后会从执行栈上移除，但是堆上的作用域成员因为被外部引用不能释放，因此内部函数依然可以访问外部函数的成员

6.纯函数

相同的输入永远会得到相同的输出，而且没有任何可观察的副作用

7.柯里化

当一个函数有多个参数的时候先传递一部分参数调用它（这部分参数永远不会变），然后返回一个新的函数接收剩余的参数，返回结果

1）柯里化可以让我们给一个函数传递较少的参数得到一个已经记住某些固定参数的新函数
2）这是一种对函数参数的缓存（通过闭包进行缓存）
3）让函数变得更灵活，让函数的粒度更小
4）可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能

8.函数的组合

函数组合可以让我们把细粒度的函数重新组合为一个新的函数

9.Point Free

我们可以把数据处理的过程定义成与数据无关的合成运算，不需要用到代表数据的那个参数，只要把简单的运算步骤合成到一起，
在使用这种模式之前我们需要定义一些辅助的基本运算函数

1）不需要指明处理的数据
2）只需要合成运算过程
3）需要定义一些辅助的基本运算函数

10.函子

1）容器：包含值和值的变形关系（变形关系就是函数）
2）函子：是一个特殊的容器，通过一个普通的对象来实现，该对象具有map方法，map方法可以运行一个函数对值进行处理
（变形关系）

11.总结：

1）函数式编程的运算不直接操作值，而是由函子来完成
2）函子就是一个实现了map契约的对象
3）我们可以把函子想象成一个盒子，这个盒子里封装了一个值
4）想要处理盒子中的值，我们需要给盒子的map方法传递一个处理值的函数（纯函数），由这个函数来对值进行处理
5）最终map方法返回一个包含新值的盒子（函子）

二.Javascript异步编程

1.Promise

1）Promise就是一个类，在执行这个类的时候，需要传递一个执行器进去，执行器会立即执行

2）Promise中三种状态，成功（fulfilled），失败（rejected），等待（pending），pending->fulfilled,pending->rejected,一旦状态
确定就不可更改

3）resolve和reject是用来改变状态的
resolve：fulfilled
reject：rejected

4）then方法内部做的事情就是判断状态，如果状态为成功，就调用成功回调函数，如果状态为失败，就调用失败回调函数，then
方法是被定义在原型对象中的

5）then成功回调有一个参数，表示成功之后的值，then失败回调有一个参数，表示失败的原因
