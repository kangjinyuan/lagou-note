一.工程化概述

1.主要解决的问题：

1）传统语言或语法的弊端
2）无法使用模块化/组件化
3）重复的机械式工作
4）代码风格统一，质量保证
5）依赖后端服务接口支持
6）整体依赖后端项目

2.工程化表现

定义：一切以提高效率，降低成本，质量保证为目的的手段都属于【工程化】

二.脚手架工具

1.脚手架的本质作用：创建项目基础结构，提供项目规范和约定

2.传统项目

1）相同的组织结构
2）相同的开发范式
3）相同的模块依赖
4）相同的工具配置
5）相同的基础代码

3.常用的脚手架工具

1）create-react-app，react项目
2）vue-cli，Vue项目
3）angular-cli，angular项目
4）Yeoman

定义：创建现代化web应用的脚手架工具

步骤：

1）安装Yeoman，npm i yo -g
2）安装generator-node，npm i generator-node -g
3）创建Yo项目，yo node

注意：window中由于node版本的不同，可能在创建时会发生问题，比如：DEP0066：outingMessage._headers，outingMessage._headerNames
解决办法：初始化pakeage.json文件，在进行yo node创建项目

4.sub generator（子集生成器）

1）generator-node的sub generator

node:boilerplate
node:cli
node:editorconfig
node:eslint
node:git
node:readme

2）添加cli文件：yo node:cli

3）npm link将模块挂载到全局，就可以使用 practice-01（模块名） --help

4）自定义generator

目录结构：

generators
	app
		index.js
		此文件作为Generator的核心入口
		需要导出一个继承 Yeoman Generator 的类型
		Yeoman Generator 在工作时会自动调用我们在此类型中定义的一些生命周期方法
		我们在这些方法中可以通过父类提供的一些工具方法实现一些功能，例如文件写入

// Yeoman 自动在生成文件阶段调用此方法
    // this.fs.write(
    //   this.destinationPath('temp.txt'),
    //   Math.random().toString()
    // )

    // 通过模板方式写入文件到目标目录

    // 模板文件目录
    const tmpl = this.templatePath('foo.txt')
    // 输出目标路径
    const output = this.destinationPath('foo.txt')
    // 模板数据上下文
    const context = { title: 'Hello kjy', success: false }

    this.fs.copyTpl(tmpl, output, context)

pakeage.json

generator本质是一个npm模块

5）yeoman-generator

yeoman生成器模块，提供了生成器的基类，提供了一些工具函数，可以使我们创建生成器的时候更加便捷
安装 yeoman-generator
npm i yeoman-generator

模板方式写入文件：

相对于手动创建每一个文件，模板的方式大大提高了效率

接收用户输入

prompt()

发布Generator
npm public

5）Plop

将plop模块作为项目开发依赖安装
在项目根目录下创建一个plopfile.js文件
在plopfile.js文件定义脚手架任务
编写用于生成特定文件的模板
通过plop提供的cli运行脚手架任务

脚手架的工作原理

yarn init 初始化pakeage.json

新建cli.js

#!/usr/bin/env node
// Node Cli 应用入口文件必须要有这样的文件头

npm i inquirer：命令行交互模块
npm i ejs 模板引擎

二.自动化构建

1.构建scss
.\node_modules\.bin\sass （scss源文件）（css输出文件）

yarn add browser-sync --dev
用于启动测试服务器，运行项目

npm scripts

"scripts": {
        "build": "sass main.scss css/main.css --watch",
        "serve": "browser-sync . --files \"css/*.css\"",
        "start": "run-p build serve"
    },

2.常用的自动化构建工具

1.Grunt 灵活多变

1）安装grunt：npm i grunt

2）添加gruntfile.js入口文件

3）常用插件

grunt-contrib-clean 清除在生成文件时的临时文件
grunt-sass 处理scss文件的插件
grunt-babel，@babel/core @babel/preset-env 处理es6的插件
grunt-contrib-watch 自动编译文件


2.Gulp 灵活多变

1）安装gulp：npm i gulp

2）创建gulpfile.js入口文件

3）核心工作原理

输入（读取流）=》加工（转换流）=》输出（写入流）

4）常用插件

npm i gulp-clean-css 提供压缩css的转换流
npm i gulp-rename 重写文件名
npm i gulp-sass scss文件转换流插件
npm i gulp-babel js转换流插件
npm i gulp-imagemin 压缩图片
npm i gulp-swig 模板引擎的转换插件
npm i del 清除指定文件
npm i gulp-load-plugins 自动载入插件
npm i browser-sync 开发服务器，提供热更新功能
npm i gulp-useref 自动引入构建注释,文件引用处理
npm i gulp-htmlmin 压缩html
npm i gulp-uglify 压缩js
npm i gulp-if 做判断的插件

3.FIS 初学者

百度团队开发

